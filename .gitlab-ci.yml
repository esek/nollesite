# Build a Docker image with CI/CD and push to the GitLab registry.
# Docker-in-Docker documentation: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
#
# This template uses one generic job with conditional builds
# for the default branch and all other (MR) branches.

.remote_docker:
  variables:
    DOCKER_HOST: ssh://root@$DESTINATION_HOST
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa $DESTINATION_HOST >> ~/.ssh/known_hosts

docker-build:
  # Use the official docker image.
  image: docker:latest
  stage: build
  #services:
  #  - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - docker push "$CI_REGISTRY_IMAGE${tag}"
    - docker image prune -af --filter "until=48h"
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile

deploy image:
  image: docker:latest
  stage: deploy
  extends: .remote_docker
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest

    # Remove old container
    - docker stop barskerm 2> /dev/null || true
    - docker rm --force barskerm 2> /dev/null || true
    - docker image prune -f --filter "label=project=barskerm"

    - docker run
      --name barskerm
      --label "traefik.http.routers.barskerm.rule=Host(\`pub.esek.se\`, \`barskerm.esek.se\`)"
      --network=traefik
      -d $CI_REGISTRY_IMAGE:latest
  environment:
    name: production
    url: https://pub.esek.se
  only:
    - main

deploy review:
  image: docker:latest
  stage: deploy
  extends: .remote_docker
  script:
    - echo "Deploying review for $CI_COMMIT_BRANCH at commit $CI_COMMIT_SHORT_SHA"
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

    # Remove old container
    - docker stop barskerm-$CI_COMMIT_REF_SLUG 2> /dev/null || true
    - docker rm --force barskerm-$CI_COMMIT_REF_SLUG 2> /dev/null || true
    - docker image prune -f --filter "label=project=barskerm"

    - docker run
      --name barskerm-$CI_COMMIT_REF_SLUG
      --network=traefik
      --label "project=barskerm-$CI_COMMIT_REF_SLUG"
      -d $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: https://barskerm-$CI_COMMIT_REF_SLUG.esek.se
    on_stop: 'stop review'
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_MERGE_REQUEST_ID

stop review:
  image: docker:latest
  stage: deploy
  extends: .remote_docker
  script:
    - echo "Removing review deploy for $CI_COMMIT_BRANCH at commit $CI_COMMIT_SHORT_SHA"

    # Remove old container
    - docker stop barskerm-$CI_COMMIT_REF_SLUG 2> /dev/null || true
    - docker rm --force barskerm-$CI_COMMIT_REF_SLUG 2> /dev/null || true
    - docker image prune -f --filter "label=project=barkskerm"
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_MERGE_REQUEST_ID
